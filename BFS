#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_VERTICES 50
typedef struct Graph 
{
    int num_vertices;
    int adj_matrix[MAX_VERTICES][MAX_VERTICES];
} Graph;
void init_graph(Graph *g) 
{
    g->num_vertices = 0;
    for (int i = 0; i < MAX_VERTICES; i++) 
	{
        for (int j = 0; j < MAX_VERTICES; j++) 
		{
            g->adj_matrix[i][j] = 0;
        }
    }
}
void add_vertex(Graph *g) 
{
    g->num_vertices++;
}
void add_edge(Graph *g, int src, int dest) 
{
    g->adj_matrix[src][dest] = 1;
    g->adj_matrix[dest][src] = 1;
}
void breadth_first_search(Graph *g, int start_vertex) 
{
    int visited[MAX_VERTICES];
    memset(visited, 0, sizeof(visited));
    int queue[MAX_VERTICES];
    int head = 0, tail = 0;
    queue[tail++] = start_vertex;
    visited[start_vertex] = 1;
    while (head != tail) 
	{
        int current_vertex = queue[head++];
        printf("Visited %d\n", current_vertex);
        for (int i = 0; i < g->num_vertices; i++) 
		{
            if (g->adj_matrix[current_vertex][i] && !visited[i]) 
			{
                queue[tail++] = i;
                visited[i] = 1;
            }
        }
    }
}
int main() 
{
    Graph g;
    init_graph(&g);
    add_vertex(&g); add_vertex(&g); add_vertex(&g);
    add_vertex(&g); add_vertex(&g); add_vertex(&g);
    add_edge(&g, 0, 1); add_edge(&g, 0, 2); add_edge(&g, 1, 3);
    add_edge(&g, 1, 4); add_edge(&g, 2, 5); add_edge(&g, 2, 6);
    breadth_first_search(&g, 0);
    return 0;
}
