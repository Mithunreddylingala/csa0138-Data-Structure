#include <stdio.h>
#include <stdlib.h>
typedef struct 
{
    int key;
    int value;
} HashEntry;

HashEntry *hashArray;
int arraySize;

int hashCode(int key) 
{
    return key % arraySize;
}

int lookup(int key) 
{
    int hashIndex = hashCode(key);

    while (hashArray[hashIndex].key != -1) 
	{
        if (hashArray[hashIndex].key == key)
            return hashArray[hashIndex].value;
        hashIndex++;
        hashIndex %= arraySize;
    }

    return -1;
}

void insert(int key, int value) 
{
    int hashIndex = hashCode(key);

    while (hashArray[hashIndex].key != -1) 
	{
        hashIndex++;
        hashIndex %= arraySize;
    }

    hashArray[hashIndex].key = key;
    hashArray[hashIndex].value = value;
}

void initializeHashArray(int size) 
{
    arraySize = size;
    hashArray = (HashEntry *) malloc(arraySize * sizeof(HashEntry));

    for (int i = 0; i < arraySize; i++) 
	{
        hashArray[i].key = -1;
        hashArray[i].value = -1;
    }
}

int main() 
{
    initializeHashArray(10);
    insert(10, 20);
    insert(20, 30);
    insert(30, 40);
    printf("Value for key 10: %d\n", lookup(10));
    printf("Value for key 20: %d\n", lookup(20));
    printf("Value for key 30: %d\n", lookup(30));
    printf("Value for key 40: %d\n", lookup(40));
    return 0;
}
